version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
      event:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environment:${CIRCLE_WORKFLOW_ID:O:7}"
            aws s3 rm s3://udapeople-lanrealx --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:O:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:O:7}
            aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7}            
 
           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |          
            cd frontend
            npm install
            npm run build          
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
  
  test-frontend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run: 
            name: Run frontend test
            command: | 
              cd frontend
              npm install
              npm run test
        # Restore from cache
        # Your job code here
 
  test-backend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [backend-build]
        # Your job code here
        - run:
            name: Run Backend test
            command: |
              cd backend
              npm install
              npm run test           

  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: pass    
          template: basic_success_1

      - slack/notify:
          event: fail
          template: basic_fail_1


  scan-backend:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force         
  
  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps: 
  #     - slack/notify:
  #         event: pass    
  #         template: basic_success_1

  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
              

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople \
             

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:O:7}" \
            --query "reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints: ["ca:00:63:fc:93:29:2a:30:1b:b9:65:bc:75:1d:2b:d0"]
      # attach workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/migration_$\{CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
 # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
        user: root
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_UR: = ${API_URL}"
            echo API-URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints: ["ca:00:63:fc:93:29:2a:30:1b:b9:65:bc:75:1d:2b:d0"]
      # attach workspace
      - attach_workspace:
          at: ~/   
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli
            
            
      - run:
          name: Deploy backend
          command: |
            cd backend
            
            touch .env
            echo ENVIROMENT=development > “.env”
            echo TYPEORM_CONNECTION=postgres >> “.env”
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> “.env”
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> “.env”
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> “.env”
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> “.env”
            echo TYPEORM_PORT=$TYPEORM_PORT >> “.env”
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> “.env”
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> “.env”
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> “.env”

            pwd
            ls -al
            npm install
            npm run build
            cd ..
            pwd
            tar -C backend -czvf artifact.tar.gz
            
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # your code here
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:

    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations] 
      - deploy-backend:
          requires: [run-migrations]

      # - notify:
      #     requires: [build-frontend, build-backend, test-frontend, test-backend, scan-frontend, scan-backend]
      #     context: slack-secrets

version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.0
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here
    #   workflow_id:
    #     type: string
    #   event:
    #     type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environment:${CIRCLE_WORKFLOW_ID:O:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:O:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:O:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:O:7}           

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7} -d '1')
            if [ ${SUCCESS} = "success" ];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

        #  # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
        #  SUCCESS = 1
        #  if(( $SUCCESS==1 )); 
        #  then
        #  #  cd ~/project/backend
        #  #  npm install
        #  #  Add revert code here. You can find this in the Getting Started section.
        #    exit 1
        #  fi

           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |          
            cd frontend
            npm install
            npm run build          
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run: 
            name: Run frontend test
            command: | 
              cd frontend
              npm install
              npm run test
        # Restore from cache
        # Your job code here
 
  test-backend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [backend-build]
        # Your job code here
        - run:
            name: Run Backend test
            command: |
              cd backend
              npm install
              npm run test           

  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: pass    
          template: basic_success_1

      - slack/notify:
          event: fail
          template: basic_fail_1


  scan-backend:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force         
  
  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps: 
  #     - slack/notify:
  #         event: pass    
  #         template: basic_success_1

  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
              

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople 
             

      - run:
          name: Add back-end ip to ansible inventory
          command: |                        
              echo "[web]" > .circleci/ansible/inventory.txt
              BACKEND_IP=(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              echo ${BACKEND_IP}
              curl --insecure -d "${BACKEND_IP}" https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP
              
              echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.10-alpine3.16
      - image: python:3.7-alpine3.11

    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints: ["ca:00:63:fc:93:29:2a:30:1b:b9:65:bc:75:1d:2b:d0"]
      # attach workspace
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
   
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update --no-cache ansible tar gzip aws-cli openssh
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            
           # pwd
           # cd .circleci/ansible
           # ls -al
           # ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 10m
      - destroy-environment
      # Here's where you will add some code to rollback on failure         
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
        user: root
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install

            echo ENVIROMENT=development > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            MIGRATIONS_OUTPUT=$(npm run migrations)

           # npm run migrations > migrations_dump.txt
           # cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            echo $(MIGRATIONS_OUTPUT)
            if grep -q "has been executed successfully." $(MIGRATIONS_OUTPUT)
            then
                curl --insecure "success" https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/migration_$\{CIRCLE_WORKFLOW_ID:0:7}-DBMigrationsStatus
            else
                curl --insecure "failure" https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/migration_$\{CIRCLE_WORKFLOW_ID:0:7}-DBMigrationsStatus
            fi
      - destroy-environment

 # Here's where you will add some code to rollback on failure      
          
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Set env variables
          command: |
            BACKEND_IP=$(curl --insecure https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL=$API_URL >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
             curl --insecure -d "${CIRCLE_WORKFLOW_ID:0:7}" https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/UdaPeople-cloudfront-WORKFLOW_ID
      - destroy-environment
      - revert-migrations


  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar
  #           apk add --update --no-cache gzip
  #           apk add --update --no-cache nodejs
  #           apk add --update --no-cache npm
  #           apk add --update --no-cache aws-cli
  #           apk add --update --no-cache curl
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL=${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # - destroy-environment
      # - revert-migrations

      # Here's where you will add some code to rollback on failure      

  deploy-backend:
    docker:
      - image: cimg/python:3.10.0-node
        user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ca:00:63:fc:93:29:2a:30:1b:b9:65:bc:75:1d:2b:d0"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            pip install awscli
      - run:
          name: install node modules
          command: |
            cd /root/project/backend
            npm install
      - run:
          name: build backend dist
          command: |
            cd /root/project/backend
            npm i
            echo ENVIROMENT=development > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm run build
            npm run prestart:prod
      - run:
          name: build zip file
          command: |
            cd /root/project/
            tar -zcvf api.tar.gz backend/
            mv api.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: add ansible config
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
      - run:
          name: Deploy backend
          command: |
            echo $(curl --insecure https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP) >> .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations


  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #        fingerprints: ["ca:00:63:fc:93:29:2a:30:1b:b9:65:bc:75:1d:2b:d0"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli
            
            
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           pwd
  #           cd backend
            
  #           touch .env
  #           echo ENVIROMENT=production > “.env”
  #           echo TYPEORM_CONNECTION=postgres >> “.env”
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> “.env”
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> “.env”
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> “.env”
  #           echo NODE_ENV=production >> ".env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> “.env”
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> “.env”
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> “.env”
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> “.env”
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> “.env”

  #           pwd
  #           ls -al
  #           npm install
  #           npm run build
  #           cd ..
  #           pwd
  #           ls -al
  #           tar -C backend -czvf artifact.tar.gz .
                        
  #           cd .circleci/ansible

  #           echo "Contents of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml

      # - destroy-environment
      # - revert-migrations
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(curl --insecure https://kvdb.io/KYhyB7HfeoeV1Y4BLM9nKN/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP)
            echo BACKEND_URL: http://${BACKEND_IP}:3030/api/status
            if curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/ | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations


  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #     - image: python:3.10-alpine3.16 
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm curl aws-cli

  #     - run:
  #         name: Get backend url and Backend Smoke test
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text)
  #           echo ${BACKEND_IP}

  #           export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')

  #           echo $BACKEND
  #           export API_URL="http://${BACKEND}:3030"
  #           echo "API_URL=${API_URL}"

  #           echo "Sleeping for 1 minute"
  #           sleep 60
          

  #           if curl -v "${API_URL}/api/status" | grep "ok"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"

  #           echo ${URL}

  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi

      # - destroy-environment
      # - revert-migrations
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  


workflows:
  default:

    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations] 
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]


      # - notify:
      #     requires: [build-frontend, build-backend, test-frontend, test-backend, scan-frontend, scan-backend]
      #     context: slack-secrets
